class Solution {
public:
    
    bool bfs(vector<vector<int>>& graph, vector<int>&color, int i)
    {
        queue <int> q;
        color[i] = 1;
        q.push(i);
        while(!q.empty())
        {
            int x = q.front();
            q.pop();
            for(auto u: graph[x])
            {
                if(color[u] == -1)
                {
                    color[u] = 1-color[x];
                    q.push(u);
                }    
                else if(color[u] == color[x])
                    return false;
            }
        }
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& graph) {
        if(graph.size() <= 2)
            return true;
        int N = graph.size();
        vector<int>color(N, -1);
        for(int i = 0; i < N; i++)  // for non-connected also
        {
            if(color[i] == -1)
            {
                if(!bfs(graph, color, i))
                {
                    return false;
                }
            }
        }
        return true;
    }
};