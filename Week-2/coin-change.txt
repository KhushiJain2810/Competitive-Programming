// Time Complexity: O(amount * no of coins)
// Space Complexity: O(amount)

// class Solution {
// public:
//     int coinChange(vector<int>& coins, int amount) {
        
//         if(!amount)
//             return 0;
//         vector <int> v(amount+1, INT_MAX);
//         v[0] = 0;
//         for(int i = 1; i <= amount; i++)
//         {
//             for(int j = 0; j < coins.size(); j++)
//             {
//                 if(coins[j] > i || v[i-coins[j]] == INT_MAX)
//                     continue;
//                 v[i] = min(v[i], v[i-coins[j]]+1);
//             }
//         }
//         return v[amount] == INT_MAX ? -1 : v[amount];   
//     }
// };


class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        
        if(!amount)
            return 0;
        int v[amount+1];
        v[0] = 0;
        sort(coins.begin(), coins.end());
        for(int i = 1; i <= amount; i++)
        {
            v[i] = INT_MAX;
            for(int j = 0; j < coins.size(); j++)
            {
                if(coins[j] > i)
                    break;
                if(v[i-coins[j]] != INT_MAX)
                    v[i] = min(v[i], v[i-coins[j]] + 1);
            }
        }
        return v[amount] == INT_MAX ? -1 : v[amount];
    }
};

// class Solution {
// public:
//     int coinChange(vector<int>& coins, int amount) {
        
//         if(!amount)
//             return 0;
//         vector <int> v(amount+1, amount+1);
//         v[0] = 0;
//         for(int i = 1; i <= amount; i++)
//         {
//             for(int j = 0; j < coins.size(); j++)
//             {
//                 if(coins[j] <= i)
//                     v[i] = min(v[i], v[i-coins[j]]+1);
//             }
//         }
//         return v[amount] > amount? -1: v[amount];
//     }
// };




