// TC: (n*sum)
// SC: (n*sum) where n = no of elements in array

class Solution {
public:
    
    bool subsetSum(vector<int>& nums, int sum)
    {
        vector<vector<bool>>dp(nums.size(), vector<bool>(sum+1));
        
        for(int i = 0; i < nums.size(); i++)
        {
            for(int j = 0; j <= sum; j++)
            {
                if(j == 0)
                    dp[i][j] = 1;
                else if(i == 0)
                    dp[i][j] = ( nums[i] == j ) ;
                else
                {
                    if(nums[i] > j)
                        dp[i][j] = dp[i-1][j];
                    else
                        dp[i][j] = ( dp[i-1][j] || dp[i-1][j-nums[i]] );
                }
            }
        }
        
        return dp[nums.size()-1][sum];
    }
    
    bool canPartition(vector<int>& nums) {
        
        int totalSum = 0;
        for(auto i : nums)
            totalSum += i;
        
        if(totalSum % 2)  
            return 0;
        
        return subsetSum(nums, totalSum/2);
        
    }
};


// If total sum of array elements is odd, no way is possible to get equal sum of two halves.
// If total sum is even, each of the two subsets will have sum equal to half of total sum(to ensure equal sum of both subsets)
// if a subset sum == totalSum/2, then rest of the elements will have sum equal to totalSum/2.